# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "master", "develop" ]
    types: [ opened, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set Env value when push
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo $GITHUB_REF
          echo ${{ github.head_ref }}
          echo ${{ github.base_ref }}

          if [[ "$GITHUB_REF" == "refs/heads/develop" ]]; then
            echo "Setting profile=dev"
            echo "profile=dev" >> $GITHUB_ENV
          elif [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            echo "Setting profile=prod"
            echo "profile=prod" >> $GITHUB_ENV
          fi

      - name: Set Env value when pr
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "Setting profile=prod"
          echo "profile=prod" >> $GITHUB_ENV

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: |
          echo $profile
          mvn clean package -P $profile -DskipTests

        # s3로 보내기 위해 working directory에 build 폴더에 zip 파일을 저장해야 함.
      - name: zip jar with docker file
        run: |
          mkdir build
          ls
          cd target/
          ls
          mv service.jar ../build
          cd ..
          cd docker/$profile
          cp lifepost-service.Dockerfile ../../build
          cp docker-compose.yml ../../build
          cd ..
          cd ..
          mv appspec.yml build/
          mv start.sh build/
          zip -r ./build/build.zip build/
          ls
      # build 폴더내 zip파일을 s3로 전송
      - name: Sync Bucket
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_EC2_METADATA_DISABLED: true
        run: |
          aws s3 sync \
            --region ap-northeast-2 \
            build s3://lifepost-jar-bucket/$profile \
            --delete

      - name: Code deploy
        run: aws deploy create-deployment --application-name lifepost-app-$profile --deployment-group-name lifepost-app-dg-$profile --s3-location bucket=lifepost-jar-bucket,bundleType=zip,key=$profile/build.zip
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: ap-northeast-2